# Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежит куча камней. 
# Игроки ходят по очереди, первый ход делает Петя. 
# За один ход игрок может добавить в кучу один или четыре камня либо увеличить количество камней в куче в пять раз. 
# Например, имея кучу из 15 камней, за один ход можно получить кучу из 16, 19 или 75 камней. 
# У каждого игрока, чтобы делать ходы, есть неограниченное количество камней. И
# гра завершается в тот момент, когда количество камней в куче становится не менее 68.

# Победителем считается игрок, сделавший последний ход, то есть первым получивший кучу, в которой будет 68 или больше камней. 
# В начальный момент в куче было S камней; 1 ≤ S ≤ 67.

# Будем говорить, что игрок имеет выигрышную стратегию, если он может выиграть при любых ходах противника. 
# Описать стратегию игрока  — значит, описать, какой ход он должен сделать в любой ситуации, которая ему может встретиться при различной игре противника. 
# В описание выигрышной стратегии не следует включать ходы играющего по этой стратегии игрока, не являющиеся для него безусловно выигрышными, 
# то есть не являющиеся выигрышными независимо от игры противника.

# 19) Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна.

# 20) Найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
# —  Петя не может выиграть за один ход;
# —  Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.

# 21) Найдите минимальное значение S, при котором одновременно выполняются два условия:
# —  у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# —  у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.

# s+1, s+4, s*5, s>=68, то победа

def w1(x):
    return (x+1>=68 or x+4>=68 or x*5>=68) and 1<=x and x<68

def w2(x):
    return (w1(x+1) and w1(x+4) and w1(x*5)) and not(w1(x))


def w_n(x):
    return (w1(x+1) or w1(x+4) or w1(x*5)) and not(w1(x))

def w3(x):
    return (w2(x+1) or w2(x+4) or w2(x*5))

def w4(x):
    return (w3(x+1) or w3(x+4) or w3(x*5)) and (w3(x+1) or w1(x+1)) and (w3(x+4) or w1(x+4)) and (w3(x*5) or w1(x*5))

#19
for x in range (1,68):
    if w_n(x)==1:
        print(x)
        break
#20
c = 0
for x in range (1,68):
    if w3(x)==1:
        c+=1
        if c < 3:
            print(x)
        else:
            break

#21
for x in range (1,68):
    if w4(x)==1:
        print(x)
        break